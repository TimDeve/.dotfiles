snippet dbg "Debug using Printf"
	fmt.Printf("DBGDBG-${1}: %+v\n", ${1:var}) // TODO(timdeve): DBGDBG - remove before commit

snippet dbgs "Debug using Println"
	fmt.Println("DBGDBG: ${1:here!}") // TODO(timdeve): DBGDBG - remove before commit

snippet dbgj "Debug using Printf, json output"
	{                                                // TODO(timdeve): DBGDBG - remove before commit
		j, _ := json.MarshalIndent(${1:var}, "", "  ") // TODO(timdeve): DBGDBG - remove before commit
		fmt.Printf("DBGDBG-${1}: %s\n", j)             // TODO(timdeve): DBGDBG - remove before commit
	}                                                // TODO(timdeve): DBGDBG - remove before commit

snippet dbgjp "Debug using Printf, json proto output"
	{                                                                     // TODO(timdeve): DBGDBG - remove before commit
		j, _ := protojson.MarshalOptions{Multiline: true}.Marshal(${1:var}) // TODO(timdeve): DBGDBG - remove before commit
		fmt.Printf("DBGDBG-${1}: %s\n", j)                                  // TODO(timdeve): DBGDBG - remove before commit
	}                                                                     // TODO(timdeve): DBGDBG - remove before commit

snippet dbgjpi "Debug using Printf, json proto inline output"
	{                                     // TODO(timdeve): DBGDBG - remove before commit
		j, _ := protojson.Marshal(${1:var}) // TODO(timdeve): DBGDBG - remove before commit
		fmt.Printf("DBGDBG-${1}: %s\n", j)  // TODO(timdeve): DBGDBG - remove before commit
	}                                     // TODO(timdeve): DBGDBG - remove before commit

snippet dbgspew "Debug using spew"
	fmt.Printf("DBGDBG-${1:var}:\n%+s\n", spew.Sdump($1)) // TODO(timdeve): DBGDBG - remove before commit

snippet pf "fmt.Printf()"
	fmt.Printf("%${1:s}\n", ${2:var})

snippet pln "fmt.Println()"
	fmt.Println("${1:s}")

snippet test "test function"
	func Test$1(t *testing.T) {
	  $0
	}

snippet trun "subtest function"
	t.Run("$1", func(t *testing.T) {
	  $2
	})

snippet srun "subsuite function"
	s.Run("$1", func(t *testing.T) {
	  $2
	})

snippet tablet "Table test"
	testCases := []struct {
	  name string
	}{
	  {
	    name: "${1:test name}",
	  },
	}
	
	for _, testCase := range testCases {
	  t.Run(testCase.name, func(t *testing.T) {
	    ${0:${VISUAL}}
	  })
	}

snippet errwr "Error handling with fmt.Errorf"
	if ${1}err != nil {
		return fmt.Errorf("${2} %w", err)
	}

snippet set "Set-like map"
	${2:set} := map[${1}]struct{}{}

snippet todo "Temporary todo"
	// TODO(timdeve): $1

snippet fori "For loop (three clause)"
	for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {
		$0
	}

snippet forr "For loop (range)"
	for ${1:_, }${2:v} := range ${3:v} {
		$0
	}
